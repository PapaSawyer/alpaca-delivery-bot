from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.types.web_app_info import WebAppInfo
from dotenv import load_dotenv
from datetime import datetime
import datetime as DT
import aiohttp
import asyncio
import json
import os
from pathlib import Path
import logging
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from typing import List, Union


load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
STAT_FILE = 'stat.txt'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)
logging.getLogger().setLevel(logging.INFO)



class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_photo = State()


#Album class and func for send group

class AlbumMiddleware(BaseMiddleware):  
    album_data: dict = {}

    def __init__(self, latency: Union[int, float] = 0.01):
        self.latency = latency
        super().__init__()

    async def on_process_message(self, message: types.Message, data: dict):
        if not message.media_group_id:
            return
        try:
            self.album_data[message.media_group_id].append(message)
            raise CancelHandler()  # Tell aiogram to cancel handler for this group element
        except KeyError:
            self.album_data[message.media_group_id] = [message]
            await asyncio.sleep(self.latency)
            message.conf["is_last"] = True
        data["album"] = self.album_data[message.media_group_id]

    async def on_post_process_message(self, message: types.Message, result: dict, data: dict):
        #Clean up after handling our album
        if message.media_group_id and message.conf.get("is_last"):
            del self.album_data[message.media_group_id] 







@dp.message_handler(state='*', commands=['start'])
async def start_welcome(message:types.Message, state: FSMContext):
    

    info_text = (
      
        "   –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—É–¥–∏—è –ê–ª—å–ø–∞–∫–∞!ü¶ô –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å–ª—É–≥–∏ –ø–æ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ –∫–æ–∂–∞–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π.üëû\n\n"
        "   –ß–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ —á–∞—Ç-–±–æ—Ç–∞ –í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑–¥–µ–ª–∏—è –≤ –Ω–∞—à—É –º–∞—Å—Ç–µ—Ä—Å–∫—É—é, —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
        "   –î–ª—è –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        "   1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–ú–µ–Ω—é</b> –≤ –Ω–∏–∂–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É.\n"
        "   2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª <b>–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É</b>.\n"
        "   3. –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞).\n"
        "   4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–≤–æ–µ–≥–æ –∏–∑–¥–µ–ª–∏—è —Å –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∑–æ–Ω–æ–π.\n"
        "   5. –ü–æ—Å–ª–µ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
        
    )
  
    photo = 'alp.png'

    with open(photo, 'rb') as photo:
        await bot.send_photo(chat_id=message.chat.id, photo=photo)


    await message.answer(info_text, parse_mode='HTML')



    with open(STAT_FILE, 'r') as file:
        proof = file.readline()

# Checking condition for empty state

        if proof:

            count = int(proof)

        else:

            count = 0
    
    count += 1

    with open(STAT_FILE, 'w') as file:
        file.write(str(count)) 





@dp.message_handler(state='*', commands=['price'])
async def send_price(message: types.Message, state: FSMContext):

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û–±—É–≤—å", callback_data="obuv_definition"))
    keyboard.add(types.InlineKeyboardButton(text="–°—É–º–∫–∞", callback_data="sumka_definition"))
    keyboard.add(types.InlineKeyboardButton(text="–ö—É—Ä—Ç–∫–∞", callback_data="kurtka_definition"))
    keyboard.add(types.InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ —Å–∞–ø–æ–∂–Ω–∏–∫–∞", callback_data="sapog_definition"))
    await state.finish()
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=keyboard)



#Button handler

@dp.callback_query_handler(text="obuv_definition", state='*')
async def obuv_definition(call: types.CallbackQuery, state: FSMContext):

    services = [
        " ‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏ —Ç–∫–∞–Ω–µ–≤—ã–µ (—Ö–∏–º.—á–∏—Å—Ç–∫–∞):   \n<b>3900‚ÇΩ</b> \n",
        " ‚Ä¢ –°–ª–∏–ø–æ–Ω—ã\—ç—Å–ø–∞–¥—Ä–∏–ª—å–∏ —Ç–∫–∞–Ω–µ–≤—ã–µ (—Ö–∏–º.—á–∏—Å—Ç–∫–∞):   \n<b>3900‚ÇΩ</b> \n",
        " ‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏ (–∫–æ–∂–∞\–∑–∞–º—à) –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>4900‚ÇΩ</b> \n",
        " ‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏ (–∫–æ–∂–∞\–∑–∞–º—à) –õ–æ–∫–∞–ª. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>2400‚ÇΩ</b> \n",
        " ‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏ –ë–ï–õ–´–ï –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>6400‚ÇΩ</b> \n",
        " ‚Ä¢ –ú–æ–∫–∞—Å–∏–Ω—ã\–ª–æ—Ñ–µ—Ä—ã (–∫–æ–∂–∞\–∑–∞–º—à) –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>4900‚ÇΩ</b> \n",
        " ‚Ä¢ –¢—É—Ñ–ª–∏ (–∫–æ–∂–∞\–∑–∞–º—à) –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>4900‚ÇΩ</b> \n",
        " ‚Ä¢ –ë–∞–ª–µ—Ç–∫–∏ (–∫–æ–∂–∞\–∑–∞–º—à) –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>4900‚ÇΩ</b> \n",
        " ‚Ä¢ –ë–æ—Å–æ–Ω–æ–∂–∫–∏ (–∫–æ–∂–∞\–∑–∞–º—à) –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>4900‚ÇΩ</b> \n",
        " ‚Ä¢ –°–ª–∏–ø–æ–Ω—ã (–∫–æ–∂–∞\–∑–∞–º—à) –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>4900‚ÇΩ</b> \n",
        " ‚Ä¢ –°–ª–∏–ø–æ–Ω—ã –ë–ï–õ–´–ï (–∫–æ–∂–∞) –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>6400‚ÇΩ</b> \n",
        " ‚Ä¢ –ë–æ—Ç–∏–Ω–∫–∏\–±–æ—Ç–∏–ª—å–æ–Ω—ã (–∫–æ–∂–∞\–∑–∞–º—à) –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>6400‚ÇΩ</b> \n",
        " ‚Ä¢ –°–∞–ø–æ–≥–∏\–ø–æ–ª—É—Å–∞–ø–æ–≥–∏ (–∫–æ–∂–∞\–∑–∞–º—à) –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>7300‚ÇΩ</b>",
        "   ‚Ä¢ –ß–∞—Å—Ç–∏—á. –ø–æ–∫—Ä–∞—Å–∫–∞: <b>4900‚ÇΩ</b> \n",
        " ‚Ä¢ –û–±—É–≤—å —ç–∫–∑–æ—Ç–∏—á.–∫–æ–∂–∞ (–ø–∏—Ç–æ–Ω) –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>9500‚ÇΩ</b>",
        "   ‚Ä¢ –õ–æ–∫–∞–ª. –ø–æ–∫—Ä–∞—Å–∫–∞: <b>4400‚ÇΩ</b> \n",
        " ‚Ä¢ –û–±—É–≤—å —ç–∫–∑–æ—Ç–∏—á.–∫–æ–∂–∞ (–∫—Ä–æ–∫–æ–¥–∏–ª\—Ä–µ–ø—Ç–∏–ª–∏—è) –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞:   \n<b>6900‚ÇΩ</b>",
        "   ‚Ä¢ –õ–æ–∫–∞–ª. –ø–æ–∫—Ä–∞—Å–∫–∞: <b>4400‚ÇΩ</b> \n",
        " ‚Ä¢ –õ–∞–∫–æ–≤–∞—è –∫–æ–∂–∞ –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞\—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è:   \n<b>6400‚ÇΩ</b>",
        "   ‚Ä¢ –õ–æ–∫–∞–ª. –ø–æ–∫—Ä–∞—Å–∫–∞: <b>2600‚ÇΩ</b> \n",
        " ‚Ä¢ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∫—Ä–∞—Å–∫–∞ –≤ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç:  \n<b>5500‚ÇΩ</b>",
        "   ‚Ä¢ –õ–æ–∫–∞–ª. –ø–æ–∫—Ä–∞—Å–∫–∞: <b>2600‚ÇΩ</b> \n"
    ]
    services_text = "\n".join(services)

# Button back

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    

    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ –û–±—É–≤—å:\n\n{services_text}", parse_mode=types.ParseMode.HTML, reply_markup=keyboard)


#Button handler

@dp.callback_query_handler(text="back_to_menu", state='*')
async def back_to_menu(call: types.CallbackQuery, state: FSMContext):
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–û–±—É–≤—å", callback_data="obuv_definition"))
    keyboard.add(types.InlineKeyboardButton(text="–°—É–º–∫–∞", callback_data="sumka_definition"))
    keyboard.add(types.InlineKeyboardButton(text="–ö—É—Ä—Ç–∫–∞", callback_data="kurtka_definition"))
    keyboard.add(types.InlineKeyboardButton(text="–£—Å–ª—É–≥–∏ —Å–∞–ø–æ–∂–Ω–∏–∫–∞", callback_data="sapog_definition"))

    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=keyboard)
     


# Button handler
@dp.callback_query_handler(text="sumka_definition", state='*')
async def sumka_definition(call: types.CallbackQuery, state: FSMContext):

    services = [
        "–ë–æ–ª—å—à–∞—è —Å—É–º–∫–∞:\n"
        " ‚Ä¢ –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞ –ø–æ–∫—Ä–∞—Å–∫–∞ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):   \n<b>14500‚ÇΩ</b>",
        "   ‚Ä¢ –ß–∞—Å—Ç–∏—á. –ø–æ–∫—Ä–∞—Å–∫–∞ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):   \n<b>7500‚ÇΩ</b>",
        "   ‚Ä¢ –ü—Ä–æ—Ñ.—É—Ö–æ–¥ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):   <b>8500‚ÇΩ</b> \n",

        " ‚Ä¢ –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞ –ø–æ–∫—Ä–∞—Å–∫–∞ (—ç–∫–∑–æ—Ç–∏—á. –∫–æ–∂–∞):   \n<b>18000‚ÇΩ</b>",
        "   ‚Ä¢ –ß–∞—Å—Ç–∏—á. –ø–æ–∫—Ä–∞—Å–∫–∞ (—ç–∫–∑–æ—Ç–∏—á. –∫–æ–∂–∞):   \n<b>9000‚ÇΩ</b> ",
        "   ‚Ä¢ –ü—Ä–æ—Ñ.—É—Ö–æ–¥ (—ç–∫–∑–æ—Ç–∏—á. –∫–æ–∂–∞):   \n<b>9000‚ÇΩ</b> \n",

        "–ú–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–∫–∞:\n"
        " ‚Ä¢ –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞ –ø–æ–∫—Ä–∞—Å–∫–∞ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):   \n<b>9500‚ÇΩ</b>",
        "   ‚Ä¢ –ß–∞—Å—Ç–∏—á. –ø–æ–∫—Ä–∞—Å–∫–∞ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):   \n<b>4500‚ÇΩ</b>",
        "   ‚Ä¢ –ü—Ä–æ—Ñ.—É—Ö–æ–¥ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):   \n<b>6000‚ÇΩ</b> \n",

        " ‚Ä¢ –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞ –ø–æ–∫—Ä–∞—Å–∫–∞ (—ç–∫–∑–æ—Ç–∏—á. –∫–æ–∂–∞):  \n <b>12500‚ÇΩ</b>",
        "   ‚Ä¢ –ß–∞—Å—Ç–∏—á. –ø–æ–∫—Ä–∞—Å–∫–∞ (—ç–∫–∑–æ—Ç–∏—á. –∫–æ–∂–∞):   \n<b>6000‚ÇΩ</b>",
        "   ‚Ä¢ –ü—Ä–æ—Ñ.—É—Ö–æ–¥ (—ç–∫–∑–æ—Ç–∏—á. –∫–æ–∂–∞):   \n<b>6500‚ÇΩ</b> \n",

        " ‚Ä¢ –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞ –ø–µ—Ä–µ–∫—Ä–∞—Å–∫–∞ –≤ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç:  \n <b>+2000‚ÇΩ</b>",
        "   ‚Ä¢ –õ–æ–∫–∞–ª. –ø–æ–∫—Ä–∞—Å–∫–∞ (1 –∑–æ–Ω–∞): <b>2400‚ÇΩ</b> \n",

    ]
    services_text = "\n".join(services)

# Button back

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ –°—É–º–∫–∞:\n\n{services_text}", parse_mode=types.ParseMode.HTML, reply_markup=keyboard)





@dp.callback_query_handler(text="kurtka_definition", state='*')
async def kurtka_definition(call: types.CallbackQuery, state: FSMContext):

    services = [
        " ‚Ä¢ –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):  \n <b>13700‚ÇΩ</b>",
        "   ‚Ä¢ –ß–∞—Å—Ç–∏—á. –ø–æ–∫—Ä–∞—Å–∫–∞ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):  \n <b>6500‚ÇΩ</b>",
        "   ‚Ä¢ –ü—Ä–æ—Ñ.—É—Ö–æ–¥ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):   \n <b>7000‚ÇΩ</b> \n",
        
        " ‚Ä¢ –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞ (—ç–∫–∑–æ—Ç–∏—á. –∫–æ–∂–∞):  \n <b>17000‚ÇΩ</b> ",
        "   ‚Ä¢ –ß–∞—Å—Ç–∏—á. –ø–æ–∫—Ä–∞—Å–∫–∞ (—ç–∫–∑–æ—Ç–∏—á. –∫–æ–∂–∞):   \n <b>8500‚ÇΩ</b>",
        "   ‚Ä¢ –ü—Ä–æ—Ñ.—É—Ö–æ–¥ (—ç–∫–∑–æ—Ç–∏—á. –∫–æ–∂–∞):  \n <b>9500‚ÇΩ</b>\n",

        " ‚Ä¢ –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞ (–∑–∞–º—à–∞):  \n <b>14600‚ÇΩ</b> ",
        "   ‚Ä¢ –ß–∞—Å—Ç–∏—á. –ø–æ–∫—Ä–∞—Å–∫–∞ (–∑–∞–º—à–∞): \n <b>7500‚ÇΩ</b>",
        "   ‚Ä¢ –ü—Ä–æ—Ñ.—É—Ö–æ–¥ (–∑–∞–º—à–∞):  \n <b>8500‚ÇΩ</b>",
        "   ‚Ä¢ –õ–æ–∫–∞–ª. –ø–æ–∫—Ä–∞—Å–∫–∞ (1 –∑–æ–Ω–∞): \n <b>2400‚ÇΩ</b> \n",

        " ‚Ä¢ –ü–æ–ª–Ω. –ø–µ—Ä–µ–∫—Ä–∞—Å–∫–∞ –≤ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç (–≥–ª–∞–¥–∫–∞—è):  \n <b>15500‚ÇΩ</b> \n",
        " ‚Ä¢ –ü–æ–ª–Ω. –ø–µ—Ä–µ–∫—Ä–∞—Å–∫–∞ –≤ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç (—ç–∫–∑–æ—Ç–∏—á): \n <b>19000‚ÇΩ</b> \n",
        " ‚Ä¢ –ü–æ–ª–Ω. –ø–µ—Ä–µ–∫—Ä–∞—Å–∫–∞ –≤ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç (–∑–∞–º—à–∞):  \n <b>16000‚ÇΩ</b> \n",

        " ‚Ä¢ –ü–ª–∞—â –ü–æ–ª–Ω. –ø–æ–∫—Ä–∞—Å–∫–∞ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):    \n <b>15000‚ÇΩ</b> ",
        "   ‚Ä¢ –ü–ª–∞—â –ß–∞—Å—Ç–∏—á. –ø–æ–∫—Ä–∞—Å–∫–∞ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):   \n <b>7500‚ÇΩ</b>",
        "   ‚Ä¢ –ü—Ä–æ—Ñ.—É—Ö–æ–¥ (–≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞):  \n <b>8500‚ÇΩ</b> \n",
        " ‚Ä¢ –†–µ–º–µ–Ω—å: <b>3000‚ÇΩ</b> \n",

        " ‚Ä¢ –î—É–±–ª–µ–Ω–∫–∞: <b>16400‚ÇΩ</b> ",
        "   ‚Ä¢ –õ–æ–∫–∞–ª. –ø–æ–∫—Ä–∞—Å–∫–∞ (1 –∑–æ–Ω–∞): <b>2400‚ÇΩ</b> \n",

        " ‚Ä¢ –ü–µ—Ä—á–∞—Ç–∫–∏: <b>5600‚ÇΩ</b> ",
        "   ‚Ä¢ –õ–æ–∫–∞–ª. –ø–æ–∫—Ä–∞—Å–∫–∞ (1 –∑–æ–Ω–∞): <b>2400‚ÇΩ</b> \n",

        " ‚Ä¢ –ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä (–∫–æ–∂–∞\ –∑–∞–º—à–∞\ —Ç–µ–∫—Å—Ç–∏–ª—å): <b>3900‚ÇΩ</b>",
        "   ‚Ä¢ –õ–æ–∫–∞–ª. –ø–æ–∫—Ä–∞—Å–∫–∞ (1 –∑–æ–Ω–∞): \n <b>2400‚ÇΩ</b> \n\n",

        "  –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–°–õ–£–ì–ò\n",
        " ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∫–∞–Ω–∏:    \n <b>1000‚ÇΩ</b> \n",
        " ‚Ä¢ 1 —Å–∫–≤–æ–∑–Ω–æ–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏–µ:  \n <b>3000‚ÇΩ</b> \n",
        " ‚Ä¢ 2 —Å–∫–≤–æ–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ä—Å—Ç–∏—è:  \n <b>2000‚ÇΩ</b> \n",
        " ‚Ä¢ 3 —Å–∫–≤–æ–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ä—Å—Ç–∏—è:  \n <b>1000‚ÇΩ</b> \n",
        " ‚Ä¢ 4 –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–∫–≤–æ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è: \n <b>1000‚ÇΩ</b> \n",


    ]
    services_text = "\n".join(services)

# Button back

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ –ö—É—Ä—Ç–∫–∞:\n\n{services_text}", parse_mode=types.ParseMode.HTML, reply_markup=keyboard)





@dp.callback_query_handler(text="sapog_definition", state='*')
async def sapog_definition(call: types.CallbackQuery, state: FSMContext):

    services = [
        " ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ (–ñ–ï–ù): <b>1500‚ÇΩ</b>\n",
        " ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ (–ú–£–ñ): <b>2000‚ÇΩ</b>\n\n",

        " ‚Ä¢ –ù–∞–±–æ–π–∫–∏ (–ñ–ï–ù): <b>900‚ÇΩ</b>\n",
        " ‚Ä¢ –ù–∞–±–æ–π–∫–∏ (–ú–£–ñ): <b>1200‚ÇΩ</b>\n\n",

        " ‚Ä¢ –õ–∞—Ç–∫–∞ (–ñ–ï–ù): <b>800‚ÇΩ</b>\n",
        " ‚Ä¢ –õ–∞—Ç–∫–∞ (–ú–£–ñ): <b>1000‚ÇΩ</b>\n\n",

        " ‚Ä¢ –ó–∞–¥–Ω–∏–∫–∏: <b>1600‚ÇΩ</b>\n",

        " ‚Ä¢ –ü–µ—Ä–µ—Ç—è–∂–∫–∞ –∫–∞–±–ª—É–∫–∞: <b>2500‚ÇΩ</b>\n",

        " ‚Ä¢ –ó–∞–º–µ–Ω–∞ –∫–∞–±–ª—É–∫–∞: <b>2500‚ÇΩ</b>\n",

        " ‚Ä¢ –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–∞–±–ª—É–∫–∞: <b>1000‚ÇΩ</b>\n",

        " ‚Ä¢ –ü–µ—Ä–µ—à–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: <b>900‚ÇΩ</b>\n",

        " ‚Ä¢ –†–∞—Å—Ç—è–∂–∫–∞: <b>1000‚ÇΩ</b>\n",

        " ‚Ä¢ –ö—Ä—É–≥–æ–≤–æ–π –ø–æ—à–∏–≤: <b>2000‚ÇΩ</b>\n",

        " ‚Ä¢ –ö—Ä—É–≥–æ–≤–∞—è –ø–æ–¥–∫–ª–µ–π–∫–∞ –ø–æ–¥–æ—à–≤—ã: <b>1500‚ÇΩ</b>\n",

        " ‚Ä¢ –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ—Å–∏–∫–∞: <b>900‚ÇΩ</b>\n",

        " ‚Ä¢ –ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –ø–æ–¥–æ—à–≤—ã: <b>1000‚ÇΩ</b>\n",

        " ‚Ä¢ –ó–∞–º–µ–Ω–∞ —Å–µ—Ç–∫–∏: <b>2500‚ÇΩ</b>\n",

        " ‚Ä¢ –ó–∞–º–µ–Ω–∞ –º–æ–ª–Ω–∏–∏:\n",
        "   (–º–∞–ª) - <b>900‚ÇΩ</b>\n",
        "   (–±–æ–ª—å—à) - <b>1500‚ÇΩ</b>\n\n",

        " ‚Ä¢ –ü–µ—Ä–µ—à–∏–≤\–∑–∞–º–µ–Ω–∞ —Ä—É—á–µ–∫: <b>500‚ÇΩ</b>\n",

        " ‚Ä¢ –ü–µ—Ä–µ—à–∏–≤\–∑–∞–º–µ–Ω–∞ —Ä–µ–∑–∏–Ω–∫–∏: <b>500‚ÇΩ</b>\n",

        " ‚Ä¢ –£–∫–æ—Ä–æ—Ç–∏—Ç—å —Ä–µ–º–µ—à–æ–∫: <b>500‚ÇΩ</b>\n",






    ]
    services_text = "\n".join(services)


# Button back

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    await bot.answer_callback_query(call.id)
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ –°–∞–ø–æ–∂–Ω–∏–∫–∞:\n\n{services_text}", parse_mode=types.ParseMode.HTML, reply_markup=keyboard)






@dp.message_handler(state='*', commands=['info'])
async def info_send(message: types.Message, state: FSMContext):


    info_text = (

        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—è:\n\n"
        "üåé –ê–¥—Ä–µ—Å: –≥.–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑, —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è 51/1\n\n"
        "üåé –ê–¥—Ä–µ—Å: –≥.–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑, —É–ª. –ú–∞—Ä–∫–æ–≤–∞ 1–ê\n\n"
        "‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: —Å 9:00 –¥–æ 19:00,\n —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö\n\n"
        "üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: +7(918)-822-94-44\n\n"
        "üó∫Ô∏è Google –∫–∞—Ä—Ç—ã: [–ú—ã –∑–¥–µ—Å—å!](https://maps.app.goo.gl/N1FAjH3QFxPBaK9P9)\n\n"
        "üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã: [–ú—ã –∑–¥–µ—Å—å!](https://yandex.ru/maps/-/CDb~z-Yj)\n\n"
        "üåê WhatsApp: [WhatsApp Alpaca](wa.me/79188229444)\n\n"
        "üåê Instagram\*: [Instagram Alpaca](https://www.instagram.com/alpaca_masterskaya?igsh=NTc4MTIwNjQ2YQ==)\n"
        "   \*: ¬´–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§¬ª"
        
        
    )

    await message.answer(info_text, parse_mode='Markdown', disable_web_page_preview=True)
    # await message.answer(text='*: ¬´–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§¬ª')

    
    
  

@dp.message_handler(state='*', commands=['delivery'])
async def delivery_send(message: types.Message):
    await OrderStates.waiting_for_name.set()
    await message.answer(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û:")
    


@dp.message_handler(state=OrderStates.waiting_for_name)
async def process_service(message: types.Message, state: FSMContext):

    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await OrderStates.next()



@dp.message_handler(state=OrderStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):

    await state.update_data(phone=message.text)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –í–∞—à–µ–≥–æ –∏–∑–¥–µ–ª–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∑–æ–Ω–æ–π:")
    await OrderStates.next()




#Handler - class AlbumMiddleware for input photo group

@dp.message_handler(is_media_group=True, content_types=types.ContentType.ANY, state=OrderStates.waiting_for_photo)
async def handle_albums(message: types.Message, album: List[types.Message], state:FSMContext):

    
    data = await state.get_data()
    name = data.get("name")
    phone = data.get("phone")

    contact_info = f"–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞: {name}\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {phone}"
    await bot.send_message(chat_id=CHANNEL_ID, text=contact_info)


    media_group = types.MediaGroup()
    for obj in album:
        if obj.photo:
            file_id = obj.photo[-1].file_id
        else:
            file_id = obj[obj.content_type].file_id
        try:
            # We can also add a caption to each file by specifying `"caption": "text"`
            media_group.attach({"media": file_id, "type": obj.content_type})
        except ValueError:
            return await message.answer("This type of album is not supported by aiogram.")
    # Send the media group to the specified group
    await bot.send_media_group(chat_id=CHANNEL_ID, media=media_group)
    await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    await state.finish()



#Handler for send single photo (single photo is not album function)
@dp.message_handler(content_types=[types.ContentType.PHOTO], state=OrderStates.waiting_for_photo)
async def handle_single_photo(message: types.Message, state:FSMContext):

    data = await state.get_data()
    name = data.get("name")
    phone = data.get("phone")

    contact_info = f"–ò–º—è: {name}\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {phone}"
    await bot.send_message(chat_id=CHANNEL_ID, text=contact_info)

    await bot.send_photo(chat_id=CHANNEL_ID, photo=message.photo[-1].file_id)
    await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.")
    await state.finish()




#Statistics command, hiden in chat-bot

@dp.message_handler(state='*', commands=['stat'])
async def send_stat(message: types.Message):

    with open(STAT_FILE, 'r') as file:
        count = file.read().strip()

    await message.answer(f"–ë–æ—Ç –ê–ª—å–ø–∞–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {count} —Ä–∞–∑(–∞).")





if __name__ == '__main__':

    dp.middleware.setup(AlbumMiddleware())
    executor.start_polling(dp, skip_updates=True)